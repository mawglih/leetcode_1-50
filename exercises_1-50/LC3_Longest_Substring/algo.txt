Create hashmap as object or Map(). Set longest to 0 and startindex to 0. The solution - is a use of 1 pointer (starttindex). In the for loop check if current index and value of charachter is located in hashmap. If does not - add it and set longest as Math.mx of current longest and differfence between current index and startindex + 1. +1 is needed as indices are 0 based. If current value exisits in hashmap, then the duplicate charcter found and pointer needs to be moved to next index after that: startindex = i + 1; also the key value of current value is overwritten with new index (current), longest is calculated again, but it will remain the same since i - startindex + 1 will becaome 0, and it is less then saved longest. For loop continues until string ends found. If value is found again, startindex is moved again. At the end longest is returned.